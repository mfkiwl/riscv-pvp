_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vs2_shape[0]};
        vsetvli t0, a0, e{ebits_vs2},{lmul_vs2},tu,mu;
        la a1, {vs2_data};
        {ldins_vs2} v2, (a1);        
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        la a2, {vs3_data};        
        {ldins} {vreg}, (a2);
        la a3, {rs1_data};
        {name} {vreg}, (a3), v2;
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vs2_shape[0]};
        vsetvli t0, a0, e{ebits_vs2},{lmul_vs2},tu,mu;
        la a1, {vs2_data};
        {ldins_vs2} v2, (a1);  
        la a1, {v0_data};
        {ldins_vs2} v0, (a1);               
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        la a2, {vs3_data}; 
        {ldins} {vreg}, (a2);
        la a3, {rs1_data};
        {name} {vreg}, (a3), v2, v0.t;


  diff:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )    

vsuxseg2ei16_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1, vs2, vs3 @ nfields=2, ebits_vs2=16, lmul_vs2='mf2', ldins_vs2='vle16.v', ebits=32, vreg='v4', ldins='vlseg2e32.v': |
      {inherit}
    test_basic_with_mask @ rs1, vs2, vs3, v0 @ nfields=2, ebits_vs2=16, lmul_vs2='mf2', ldins_vs2='vle16.v', ebits=32, vreg='v4', ldins='vlseg2e32.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.zeros(1*2, dtype=np.int32), np.linspace( 0, 0, 1, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 1*2, dtype=np.int32 ) ]"
      - "[ np.zeros(10*2, dtype=np.int32), np.linspace( 0, 9, 10, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 10*2, dtype=np.int32 ) ]"
      - "[ np.zeros(32*2, dtype=np.int32), np.linspace( 0, 31, 32, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 32*2, dtype=np.int32 ) ]"      
    test_basic_with_mask:
      - "[ np.zeros(1*2, dtype=np.int32), np.linspace( 0, 0, 1, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 1*2, dtype=np.int32 ), random_mask(1) ]"
      - "[ np.zeros(10*2, dtype=np.int32), np.linspace( 0, 9, 10, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 10*2, dtype=np.int32 ), random_mask(10) ]"
      - "[ np.zeros(32*2, dtype=np.int32), np.linspace( 0, 31, 32, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 32*2, dtype=np.int32 ), random_mask(32) ]"             

vsoxseg2ei16_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1, vs2, vs3 @ nfields=2, ebits_vs2=16, lmul_vs2='mf2', ldins_vs2='vle16.v', ebits=32, vreg='v4', ldins='vlseg2e32.v': |
      {inherit}
    test_basic_with_mask @ rs1, vs2, vs3, v0 @ nfields=2, ebits_vs2=16, lmul_vs2='mf2', ldins_vs2='vle16.v', ebits=32, vreg='v4', ldins='vlseg2e32.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.zeros(1*2, dtype=np.int32), np.linspace( 0, 0, 1, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 1*2, dtype=np.int32 ) ]"
      - "[ np.zeros(10*2, dtype=np.int32), np.linspace( 0, 9, 10, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 10*2, dtype=np.int32 ) ]"
      - "[ np.zeros(32*2, dtype=np.int32), np.linspace( 0, 31, 32, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 32*2, dtype=np.int32 ) ]"      
    test_basic_with_mask:
      - "[ np.zeros(1*2, dtype=np.int32), np.linspace( 0, 0, 1, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 1*2, dtype=np.int32 ), random_mask(1) ]"
      - "[ np.zeros(10*2, dtype=np.int32), np.linspace( 0, 9, 10, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 10*2, dtype=np.int32 ), random_mask(10) ]"
      - "[ np.zeros(32*2, dtype=np.int32), np.linspace( 0, 31, 32, dtype=np.uint16)*2*4, np.linspace( -1000, 1000, 32*2, dtype=np.int32 ), random_mask(32) ]"             
