_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        {fldins} fa1, (a1);
        li a0, {vs2_shape[0]};
        vsetvli t0, a0, e{ebits}, m1, tu, mu;
        la a2, {vs2_data};
        {ldins} v2, (a2);
        la a3, {v0_data};
        {ldins} v0, (a3);
        {name} v3, v2, fa1, v0
        la a3, test_{num}_data;
        {stins} v3, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vs2_shape[0]}, ({ebits}/8), 0;
        .popsection
    test_dest_eq_vs2: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        {fldins} fa1, (a1);
        li a0, {vs2_shape[0]};
        vsetvli t0, a0, e{ebits}, m1, tu, mu;
        la a2, {vs2_data};
        {ldins} v2, (a2);
        la a3, {v0_data};
        {ldins} v0, (a3);
        {name} v2, v2, fa1, v0
        la a3, test_{num}_data;
        {stins} v2, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vs2_shape[0]}, ({ebits}/8), 0;
        .popsection 
  templates:
    <<: *_templates
    test_basic @ rs1, vs2, v0 @ ebits=32, fldins='flw', ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_dest_eq_vs2 @ rs1, vs2, v0 @ ebits=32, fldins='flw', ldins='vle32.v', stins='vse32.v': |
      {inherit}      
  cases:
    test_basic:
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 1, dtype=np.float32 ), random_mask(1) ]"
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 10, dtype=np.float32 ), random_mask(10) ]"
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 32, dtype=np.float32 ), random_mask(32) ]"
    test_dest_eq_vs2:
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 1, dtype=np.float32 ), random_mask(1) ]"
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 10, dtype=np.float32 ), random_mask(10) ]"
      - "[ np.array([random.random()], dtype=np.float32), np.linspace( -1000, 1000, 32, dtype=np.float32 ), random_mask(32) ]"    
  diff:
    test_basic: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_dest_eq_vs2: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
         
vfmerge_vfm:
  <<: *default
  